@using Novel.Common.Services
@using Novel.Common.Models
@inject SearchService SearchService
@inject IJSRuntime JsRuntime;


<h3>目录</h3>
@if (chapterContent == null)
{
    @if (catalogs == null || catalogs.Count == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>标题</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var catalog in catalogs)
                {
                    <tr>
                        <td @ontouchstart="async()=>await(GetContentAsync(catalog.ChapterUrl))">@catalog.ChapterName</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <h2>@chapterContent.Title</h2>
    <div>
        <button @onclick="async()=>await(PreviousChapter())">上一章</button>
        <button @onclick="backCatalog">返回目录</button>
        <button @onclick="async()=>await(NextChapter())">下一章</button>
    </div>
    <content>@chapterContent.Content</content>
    <div>
        <button @onclick="async()=>await(PreviousChapter())">上一章</button>
        <button @onclick="backCatalog">返回目录</button>
        <button @onclick="async()=>await(NextChapter())">下一章</button>
    </div>
}
@code {
    List<Catalog> catalogs = new List<Catalog>();
    [Parameter]
    public string NovelUrl { get; set; }
    ChapterContent chapterContent;
    protected override async Task OnInitializedAsync()
    {
        BackToTop();
        chapterContent = null;
        if (!string.IsNullOrEmpty(NovelUrl))
        {
            catalogs = await SearchService.GetCatalog(NovelUrl);
        }
    }
    async void BackToTop()
    {
        await JsRuntime.InvokeVoidAsync("backToTop");
    }
    async Task GetContentAsync(string url)
    {
          BackToTop(); 
        chapterContent = await SearchService.GetChapterContent(url);
    }
    async Task PreviousChapter()
    {
        if (!string.IsNullOrEmpty(chapterContent.PreviousUrl))
        {
            BackToTop();
            chapterContent = await SearchService.GetChapterContent(chapterContent.PreviousUrl);
        }
    }
    async Task NextChapter()
    {
        if (!string.IsNullOrEmpty(chapterContent.NextUrl))
        {
            BackToTop();
            chapterContent = await SearchService.GetChapterContent(chapterContent.NextUrl);
        }
    }
    void backCatalog()
    {
        chapterContent = null;
    }
}
